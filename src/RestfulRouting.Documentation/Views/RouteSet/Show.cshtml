@{
    ViewBag.Title = "RouteSet";
}
<header id="overview">
    <h1 class="">RouteSet<small> is where it all starts</small></h1>
    <div class="subnav">
        <ul class="nav nav-pills">
            <li><a href="#basics">Basics</a></li>
            <li><a href="#connect">Connecting RouteSets</a></li>
            <li><a href="#optional">Optional Configuration</a></li>
        </ul>
    </div>
</header>

<section id="basics">
<h2>The Basics</h2>
<p><strong>A RoutSet is a collection of route mappings. It nor only define routes in your application, but can connect to other RouteSets.</strong></p>
<p>All routes are defined inside the Map method of a RouteSet.</p>
<pre class="prettyprint linenums">
public class Routes : RouteSet
{
    public override void Map(IMapper map)
    {
        map.DebugRoute("routedebug");
        map.Root&lt;HomeController&gt;(x => x.Index());
    }
}
</pre>

<p>The IMapper instance passed into Map presents a way to map your routes to the RouteTables dictionary at the heart of every ASP.Net MVC application. If you installed through Nuget, you will have noticed a RouteSet already created for you.</p>

<pre class="prettyprint linenums">
public static void Start()
{
    var routes = RouteTable.Routes;
    routes.MapRoutes&lt;Routes&gt;();
}
</pre>
<p>
    <strong>Note: This code just needs to be called at application start. We prefer WebActivator, but you can call it in Global.asax if you would like. MapRoutes is an extension method from RestfulRouting.</strong>
</p>
</section> 
<section id="connect">
<h2>Connecting RouteSets</h2>
<p>Sometimes you want to logically seperate your RouteSets. Instead of grouping all routes in a single RouteSet, we provide the ability to connect RouteSets. You must select one RoutSet to be the root of your RouteSets, after which you may connect other RouteSets any way you would like. RouteSets also support namespaces, similar to areas.</p>

<pre class="prettyprint linenums">
public class Routes : RouteSet
{
    public override void Map(IMapper map)
    {
        map.DebugRoute("routedebug");
        map.Connect&lt;One&gt;();
        map.Connect&lt;Two&gt;();
        map.Connect&lt;APIRoutes&gt;("api", new string[] { "RestfulRouting.Controllers.API" });
    }
}

public class One : RouteSet
{
    public override void Map(IMapper map)
    {
        map.Resource&lt;OneController&gt;();
    }
}

public class Two : RouteSet
{
    public override void Map(IMapper map)
    {
        map.Resources&lt;TwosController&gt;();
    }
}

public class APIRoutes : RouteSet
{
    public override void Map(IMapper map)
    {
        map.Resource&lt;RestfulRouting.Controllers.API.OneController&gt;();
        map.Resources&lt;RestfulRouting.Controllers.API.TwosController&gt;();
    }
}
</pre>
</section> 
<section id="optional">
<h2>Optional Configuration</h2>
<p>A RouteSet provides settings that can modify the behavior of route registration. These properties can be found within the context of a RouteSet. Most developers will not want to touch these features.</p>
<table class="table table-bordered table-striped">
    <thead>
        <tr>
            <th>Setting</th>
            <th>Default</th>
            <th>Result</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>LowercaseUrls</td>
            <td>true</td>
            <td>register your urls in lowercase invariant culture.</td>
        </tr>
        <tr>
            <td>LowercaseDefaults</td>
            <td>true</td>
            <td>register your actions when registered normally in lowercase invariant culture.</td>
        </tr>
        <tr>
            <td>LowercaseActions</td>
            <td>true</td>
            <td>register your actions when registered with Route in lowercase invariant culture.</td>
        </tr>
        <tr>
            <td>MapDelete</td>
            <td>false</td>
            <td>register an additional action of Delete [GET]. Usually let's you display a delete confirmation page before removing a resource.</td>
        </tr>
    </tbody>
</table>
</section>